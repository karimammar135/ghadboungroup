import * as i0 from '@angular/core';
import { EventEmitter, AfterViewInit, OnChanges, Renderer2, ElementRef, OnDestroy, OnInit } from '@angular/core';
import * as i7 from '@angular/common';

declare type Anchor = `bottom` | `bottom-left` | `bottom-right` | `center` | `left` | `top` | `top-left` | `top-right` | `right`;
declare type BreakPoint = `xs` | `sm` | `md` | `lg` | `xl` | `2xl`;
declare type Environment = `debug` | `offline` | `production`;
declare type FetchPriority = `high` | `low` | `auto`;
declare type Mode = `contain` | `cover`;
declare type Placeholder = `maincolor` | `meancolor` | `none` | `preview`;
declare type StateEvent = {
    target: any;
    state: State;
};
declare type State = `error` | `done` | `loading` | `new`;
interface AnchorObject {
    x: string | undefined;
    y: string | undefined;
}
interface Options {
    anticipation?: number;
    breakpoints?: {
        [key in BreakPoint]?: number;
    };
    class?: string;
    debug?: boolean;
    domain: string;
    env?: Environment;
    handleShadowDom?: boolean;
    maxDPR?: number;
    path?: string;
    scriptElementId?: string;
    step?: number;
}
interface Picture {
    sources: Record<string, string>[];
    img: Record<string, string>;
}
interface PlaceholderData {
    anchor: AnchorObject;
    focus: string;
    mode: Mode;
    placeholder: Placeholder;
    preTransform: string;
    ratio: number;
    refit: string;
    src: string;
    transitions: Record<string, boolean>;
    videoOptions?: VideoOptions;
}
interface VideoOptions {
    videoTransform?: string;
    posterTransform?: string;
}

declare class TwicBackgroundComponent {
    anchor: Anchor;
    bot: string;
    focus: string;
    intrinsic: string;
    mediaTag: string;
    mode: Mode;
    eager: boolean | string;
    placeholder: Placeholder;
    position: string;
    preTransform: string;
    ratio: number | string;
    src: string;
    step: number | string;
    transition: boolean | string;
    transitionDelay: string;
    transitionDuration: string;
    transitionTimingFunction: string;
    stateChangeEvent: EventEmitter<StateEvent>;
    onStateChange(stateEvent: StateEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TwicBackgroundComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TwicBackgroundComponent, "TwicBackground", never, { "anchor": "anchor"; "bot": "bot"; "focus": "focus"; "intrinsic": "intrinsic"; "mediaTag": "mediaTag"; "mode": "mode"; "eager": "eager"; "placeholder": "placeholder"; "position": "position"; "preTransform": "preTransform"; "ratio": "ratio"; "src": "src"; "step": "step"; "transition": "transition"; "transitionDelay": "transitionDelay"; "transitionDuration": "transitionDuration"; "transitionTimingFunction": "transitionTimingFunction"; }, { "stateChangeEvent": "stateChangeEvent"; }, never, never>;
}

declare class TwicImgComponent implements AfterViewInit, OnChanges {
    private renderer;
    private hostElement;
    mediaTag: string;
    alt: string;
    anchor: Anchor;
    bot: string;
    focus: string;
    intrinsic: string;
    mode: Mode;
    eager: boolean | string;
    placeholder: Placeholder;
    position: string;
    preTransform: string;
    ratio: number | string;
    refit: boolean | string;
    src: string;
    step: number | string;
    title: string;
    transition: boolean | string;
    transitionDelay: string;
    transitionDuration: string;
    transitionTimingFunction: string;
    zoom: number | string;
    stateChangeEvent: EventEmitter<StateEvent>;
    get twicZoom(): number | boolean;
    _zoom: boolean | number;
    magnifierStyle: Record<string, string>;
    constructor(renderer: Renderer2, hostElement: ElementRef);
    ngAfterViewInit(): void;
    onStateChange(stateEvent: StateEvent): void;
    ngOnChanges(): void;
    updateTemplate(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TwicImgComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TwicImgComponent, "TwicImg", never, { "alt": "alt"; "anchor": "anchor"; "bot": "bot"; "focus": "focus"; "intrinsic": "intrinsic"; "mode": "mode"; "eager": "eager"; "placeholder": "placeholder"; "position": "position"; "preTransform": "preTransform"; "ratio": "ratio"; "refit": "refit"; "src": "src"; "step": "step"; "title": "title"; "transition": "transition"; "transitionDelay": "transitionDelay"; "transitionDuration": "transitionDuration"; "transitionTimingFunction": "transitionTimingFunction"; "zoom": "zoom"; }, { "stateChangeEvent": "stateChangeEvent"; }, never, never>;
}

declare class Observer {
    private media;
    private placeholderData;
    private savedWrapperBackground;
    private stateHandler;
    constructor(stateHandler?: (state: State) => void);
    handleState: () => void;
    refreshBackground: (...args: any[]) => void;
    setMedia: (media: HTMLElement) => void;
    setPlaceholderData: (data: PlaceholderData) => void;
    destroy: () => void;
}

declare class TwicMediaComponent implements AfterViewInit, OnDestroy, OnChanges {
    private renderer;
    alt: string;
    anchor: Anchor;
    bot: string;
    className: string;
    focus: string;
    intrinsic: string;
    mode: Mode;
    mediaTag: string;
    eager: boolean | string;
    placeholder: Placeholder;
    position: string;
    preTransform: string;
    ratio: number | string;
    refit: boolean | string;
    src: string;
    step: number | string;
    title: string;
    transition: boolean | string;
    transitionDelay: string;
    transitionDuration: string;
    transitionTimingFunction: string;
    videoOptions: VideoOptions;
    stateChangeEvent: EventEmitter<StateEvent>;
    containerRef: ElementRef;
    placeholderRef: ElementRef;
    _alt: string;
    _anchor: AnchorObject;
    _bot: string;
    _className: string;
    _eager: boolean;
    _focus: string;
    _intrinsic: string;
    _media: HTMLElement;
    _mediaTag: string;
    _mode: Mode;
    _placeholder: Placeholder;
    _position: string;
    _preTransform: string;
    _ratio: number;
    _refit: string;
    _src: string;
    _step: number;
    _title: string;
    _transition: Record<string, boolean>;
    _transitionDelay: string;
    _transitionDuration: string;
    _transitionTimingFunct: string;
    _placeholder_: Placeholder;
    description: string;
    mediaAttributes: Record<string, string>;
    mediaStyle: Record<string, string>;
    observer: Observer;
    placeholderStyle: Record<string, string>;
    wrapperClass: string;
    wrapperStyle: Record<string, string>;
    constructor(renderer: Renderer2);
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    private updateMedia;
    static ɵfac: i0.ɵɵFactoryDeclaration<TwicMediaComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TwicMediaComponent, "TwicMedia", never, { "alt": "alt"; "anchor": "anchor"; "bot": "bot"; "className": "className"; "focus": "focus"; "intrinsic": "intrinsic"; "mode": "mode"; "mediaTag": "mediaTag"; "eager": "eager"; "placeholder": "placeholder"; "position": "position"; "preTransform": "preTransform"; "ratio": "ratio"; "refit": "refit"; "src": "src"; "step": "step"; "title": "title"; "transition": "transition"; "transitionDelay": "transitionDelay"; "transitionDuration": "transitionDuration"; "transitionTimingFunction": "transitionTimingFunction"; "videoOptions": "videoOptions"; }, { "stateChangeEvent": "stateChangeEvent"; }, never, never>;
}

declare class TwicPictureComponent implements AfterViewInit, OnChanges {
    private renderer;
    alt: string;
    anchor: Anchor;
    eager: boolean | string;
    fetchpriority: string;
    focus: string;
    mode: string;
    position: string;
    preTransform: string;
    ratio: number | string;
    refit: boolean | string;
    sizes: string;
    src: string;
    title: string;
    containerRef: ElementRef;
    imageRef: ElementRef;
    _alt: string;
    _anchors: Record<number, AnchorObject>;
    _eager: boolean;
    _fetchpriority: FetchPriority;
    _focuses: Record<number, string>;
    _modes: Record<number, Mode>;
    _positions: Record<number, string>;
    _preTransform: string;
    _ratios: Record<number, number>;
    _refit: string;
    _sizes: Record<number, string>;
    _sources: HTMLElement[];
    _src: string;
    _title: string;
    description: string;
    pictureData: Picture;
    constructor(renderer: Renderer2);
    ngAfterViewInit(): void;
    ngOnChanges(): void;
    private updateMedia;
    static ɵfac: i0.ɵɵFactoryDeclaration<TwicPictureComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TwicPictureComponent, "TwicPicture", never, { "alt": "alt"; "anchor": "anchor"; "eager": "eager"; "fetchpriority": "fetchpriority"; "focus": "focus"; "mode": "mode"; "position": "position"; "preTransform": "preTransform"; "ratio": "ratio"; "refit": "refit"; "sizes": "sizes"; "src": "src"; "title": "title"; }, {}, never, never>;
}

declare class TwicVideoComponent implements OnChanges {
    mediaTag: string;
    anchor: Anchor;
    bot: string;
    duration: number | string;
    focus: string;
    from: number | string;
    intrinsic: string;
    mode: Mode;
    eager: boolean | string;
    placeholder: Placeholder;
    position: string;
    posterFrom: number | string;
    preTransform: string;
    ratio: number | string;
    src: string;
    step: number | string;
    title: string;
    to: number | string;
    transition: boolean | string;
    transitionDelay: string;
    transitionDuration: string;
    transitionTimingFunction: string;
    stateChangeEvent: EventEmitter<StateEvent>;
    _duration: number;
    _from: number;
    _posterFrom: number;
    _to: number;
    videoOption: VideoOptions;
    ngOnChanges(): void;
    onStateChange(stateEvent: StateEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TwicVideoComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TwicVideoComponent, "TwicVideo", never, { "anchor": "anchor"; "bot": "bot"; "duration": "duration"; "focus": "focus"; "from": "from"; "intrinsic": "intrinsic"; "mode": "mode"; "eager": "eager"; "placeholder": "placeholder"; "position": "position"; "posterFrom": "posterFrom"; "preTransform": "preTransform"; "ratio": "ratio"; "src": "src"; "step": "step"; "title": "title"; "to": "to"; "transition": "transition"; "transitionDelay": "transitionDelay"; "transitionDuration": "transitionDuration"; "transitionTimingFunction": "transitionTimingFunction"; }, { "stateChangeEvent": "stateChangeEvent"; }, never, never>;
}

declare class TwicViewComponent implements OnInit {
    private renderer;
    private elementRef;
    constructor(renderer: Renderer2, elementRef: ElementRef);
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TwicViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TwicViewComponent, "TwicView", never, {}, {}, never, ["*"]>;
}

declare class TwicPicsComponentsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<TwicPicsComponentsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<TwicPicsComponentsModule, [typeof TwicBackgroundComponent, typeof TwicImgComponent, typeof TwicMediaComponent, typeof TwicPictureComponent, typeof TwicVideoComponent, typeof TwicViewComponent], [typeof i7.CommonModule], [typeof TwicBackgroundComponent, typeof TwicImgComponent, typeof TwicPictureComponent, typeof TwicVideoComponent, typeof TwicViewComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<TwicPicsComponentsModule>;
}

declare const installTwicPics: (options: Options) => void;

declare const installTwicpics: (options: Options) => void;

export { Anchor, Environment, Mode, Placeholder, State, StateEvent, TwicBackgroundComponent, TwicImgComponent, TwicMediaComponent, TwicPicsComponentsModule, TwicPictureComponent, TwicVideoComponent, TwicViewComponent, installTwicPics, installTwicpics };
